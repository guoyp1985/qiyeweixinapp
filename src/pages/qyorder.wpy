<style lang="less">
@import '../styles/variable.less';
.cardlist{
  padding:0rpx 40rpx;
  .nodata{
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      display:flex !important;justify-content: center; align-items: center;
      color:#666666;
      padding:20rpx;
  }
  .scroll_item{
    width: 100%;position:relative;color:#fff;
    display: flex;justify-content: center;align-items: center;
    margin-top:40rpx;
  }
  .scroll_item.grayitem{background-color: #999;}
  .scroll_item .txt{color:#fff;}
  .scroll_item.grayitem .txt{color:orange;}
  .txt-cell{position:relative;padding-top:30rpx;padding-bottom:30rpx;padding-left:20rpx;box-sizing: border-box;}
  .txt-cell:after{
    content:"";display:block;
    border-right:#fff 1px dashed;
    position: absolute;right: 0;top: 0;bottom:0px;
    -webkit-transform: scaleX(0.5) translateX(0.5px);
    transform: scaleX(0.5) translateX(0.5px);
    -webkit-transform-origin: 0% 0%;
    transform-origin: 0% 0%;
  }
  .scroll_item .ball{
    position: absolute;
    right: -28rpx;
    width: 60rpx;
    height: 60rpx;
    background-color: #fff;
    border-radius: 50%;
  }
  .scroll_item .ball-up{top: -30rpx;}
  .scroll_item .ball-down{bottom: -30rpx;}
  .scroll_item .pic{width:100rpx;}
  .scroll_item .pic image{width:80rpx;height:80rpx;border-radius:50%;}
  .btn-cell{width:180rpx;padding-top:30rpx;padding-bottom:30rpx;box-sizing: border-box;}
  .btn-cell .al{font-size:100rpx;}
  .btn-cell .icon-chat{margin-top:8rpx;}
  .rbtn{display:inline-block;padding:10rpx;border-radius:10rpx;background-color: #fff;}
  .radio_check .vux-check-icon > view{background-color: #fff;display:inline-block;}
  .vux-check-icon .circle-icon{width:22px;height:22px;border-radius:50%;display:flex !important;justify-content: center; align-items: center;}
  .vux-check-icon .circle-icon .dot{width:20rpx;height:20rpx;border-radius:50%;background-color:#eb6b5e;}
  .vux-check-icon icon{vertical-align:middle;}
}
.vux-popup-dialog scroll-view {position:relative;height: calc(~"100% - 44px")}
.protocal{
  position: fixed;
  left: 0;right:0;bottom:0;overflow:hidden;
  top: 100vh;
  width: 100vw;
  background-color: #fff;
  z-index: 10000;
  scroll-view{
    width: 100vw;
    height: 90vh;
    text-align: justify;
    padding: 0 20rpx;
    box-sizing: border-box;
    padding-bottom: 130rpx;
  }
  .close-btn{
    position: absolute;
    left: 0;
    bottom: 0;
    right: 0;
  }
}
.qyorder-page{
  .blank-area{height:120rpx;}
  .hidden{color: #fff;}
  .visiable{color: #ccc;}
  .txt-cell{width:200rpx;}
  .line{width:100%;height:24rpx;}
  .weui-cells:before{border-top:none;}
  .weui-cells:after{border-bottom:none;}
  .vux-no-group-title{margin-top:0;}
  .weui-cell{padding:0;}
  .card-area{
    .al{font-size:50rpx;font-weight:bold;}
  }
  .form-item {
    position:relative;
    padding:10px;
  }
  .form-item:after {
    content:"";
    display:block;
  	background-color: @list-border-color;
    height:1px;
    overflow:hidden;
  	position: absolute;
    left: 0;
    right: 0;
    bottom:1px;
  	-webkit-transform: scaleY(0.5) translateY(0.5px);
  	transform: scaleY(0.5) translateY(0.5px);
  	-webkit-transform-origin: 0% 0%;
  	transform-origin: 0% 0%;
  }
  .productitem{
    .pic{
      width:120rpx;
      image{width:100rpx;height:100rpx;}
    }
  }
  .box-area{
    padding:0 20rpx;
    .box-item{
      background-color:#fff;border-radius:10rpx;padding:20rpx;
      .row-item{position:relative;}
      .row-item:not(:last-child):after{
        content:"";display:block;
      	background-color:#eaeaea;height:1px;overflow:hidden;
      	position: absolute;left: 0;right: 0;bottom:0px;
      	-webkit-transform: scaleY(0.5) translateY(0.5px);
      	transform: scaleY(0.5) translateY(0.5px);
      	-webkit-transform-origin: 0% 0%;
      	transform-origin: 0% 0%;
      }
      .row-item:not(:first-child){padding-top:20rpx;}
      .row-item:not(:last-child){padding-bottom:20rpx;}
    }
  }
  .address-ico{
    width:50rpx;height:50rpx;border-radius:50%;
    text-align:center;line-height:50rpx;
    .al{font-size:36rpx;}
  }
  .app-photo{width:60rpx;height:60rpx;border-radius:50%;}
  .product-area{
    .pic{
      padding-right:20rpx;
      image{width:140rpx;height:140rpx;border-radius:10rpx;}
    }
  }
  .list-area{
    box-sizing: border-box;
    .list-item{
      background-color:#fff;border-radius:10rpx;padding:20rpx 0;
      display:flex;
      .ico-cell{
        width:60rpx;
      }
      .pic-cell{
        width:170rpx;
        image{width:160rpx;height:160rpx;}
      }
      .select{
        background-color:#eee;display:inline-block;padding:4rpx 10rpx;border-radius:10rpx;
        font-size:24rpx;
      }
    }
  }
}
.tip-confirm-modal{
  .modal-inner{width:80%;}
  .btn-area{
    height:100rpx;
  }
}
.protocal .pro-bottom{bottom:130rpx;}
.page-box-bottom{
  position: fixed;left: 0;right: 0;bottom: 0;height:100rpx;z-index:10;
  background-color: #fff;box-shadow: 0px 4rpx 18rpx rgba(0, 0, 0, 0.2);
  .box-btn{
    margin-left:20rpx;margin-right:20rpx;padding:10rpx 20rpx;border-radius:60rpx;
  }
}
.page-box-bottom.iphone{bottom:68rpx;}
.qyorder-page{
  .address-area{height:100rpx;}
  .switch-area{
    width:200rpx;height:70rpx;padding:4rpx;box-sizing:border-box;
    border-style:solid;border-width:4rpx;border-radius:60rpx;display:flex;
    .item{
      flex:1;height:100%;border-radius:60rpx;
      display:flex;justify-content:center;align-items:center;
    }
  }
  .qy-tab{
    width:100%;height:100rpx;box-sizing: border-box;
    border-style:solid;border-width:4rpx;
    border-radius:10rpx;display:flex;
    .tab-item{
      flex:1;height:100%;font-size:16px;
      display:flex;justify-content: center;align-items: center;
    }
  }
}
.mdpop-list{
  .scroll_item{display:block;padding:20rpx;box-sizing: border-box;}
  .scroll_item:not(:last-child){border-bottom:#eee 2rpx solid;}
}
</style>
<template>
  <view class="qyorder-page font14">
    <view class="box-area">
      <view wx:if="{{selectedMd && selectedMd.id}}" class="box-item b_bottom_after">
        <view class="flex_left flex_cell">
          <view class="flex_cell flex_left">
            <view>
              <view class="font16 bold">{{selectedMd.title}}</view>
              <view class="color-gray">距您{{selectedMd.distance}}</view>
            </view>
          </view>
        </view>
      </view>
      <view class="box-item b_bottom_after">
        <view class="flex_right address-area">
          <view wx:if="{{dcType == 1}}" class="flex_left flex_cell" @tap="showAddress">
            <view class="pr10">
              <view class="address-ico bg-theme" style="{{themeObject.bgStyle}}">
                <text class="al al-dizhi2 color-white"></text>
              </view>
            </view>
            <view class="flex_cell flex_cell">
              <block wx:if="{{selectAddress}}">
                <view><text class="bold">{{ selectAddress.linkman }}</text><text class="ml5">{{ selectAddress.telephone}}</text></view>
                <view class="color-gray">{{ selectAddress.fulladdress }}</view>
              </block>
              <view wx:else class="color-red">请选择地址</view>
            </view>
            <view class="flex_right pl10">
              <icon class="al al-mjiantou-copy2 font18 color-gray"></icon>
            </view>
          </view>
          <!-- <view wx:else class="flex_left flex_cell" @tap="chooseMd">
            <view class="flex_cell flex_left">
              <view>
                <view class="font16 bold">{{selectedMd.title}}</view>
                <view class="color-gray">距您{{selectedMd.distance}}</view>
              </view>
            </view>
          </view> -->
        </view>
      </view>
      <!-- <view class="padding10">
        <view class="qy-tab" style="{{themeObject.borderStyle}}">
          <view class="tab-item {{dcType == 1 ? 'active' : ''}}" style="{{dcType == 1 ? themeObject.bgStyle : themeObject.colorStyle}}" @tap="switchType(1)">
            <text>外卖</text>
          </view>
          <view class="tab-item {{dcType == 2 ? 'active' : ''}}" style="{{dcType == 2 ? themeObject.bgStyle : themeObject.colorStyle}}" @tap="switchType(2)">
            <text>自取</text>
          </view>
          <view class="tab-item {{dcType == 3 ? 'active' : ''}}" style="{{dcType == 3 ? themeObject.bgStyle : themeObject.colorStyle}}" @tap="switchType(3)">
            <text>堂食</text>
          </view>
        </view>
      </view> -->
    </view>
    <block wx:if="{{disList}}">
      <repeat for="{{listData}}" item="item" index="cindex">
        <view class="box-area mt10">
          <view class="box-item">
            <view class="db-flex mt10 w_100 product-area b_bottom_after pb10">
              <view class="pic flex_left">
                <image mode="aspectFill" src="{{item.productinfo.photo}}"/>
              </view>
              <view class="flex_cell">
                <view class="w_100">
                  <view class="name color-black font15 clamp1">{{item.productinfo.title}}</view>
                  <view class="mt5 color-gray font12 clamp1" wx:if="{{item.productinfo.optiontitle && item.productinfo.optiontitle != ''}}">{{item.productinfo.optiontitle}}</view>
                </view>
              </view>
              <view>
                <view class="align_right bold font16">¥{{item.productinfo.price}}</view>
                <view class="align_right color-gray mt5">×{{item.quantity}}</view>
              </view>
            </view>
            <view class="pt10 flex_right b_bottom_after pb10">
              <text class="color-gray">共{{item.quantity}}件商品</text>
              <text class="ml10">小计:</text>
              <text class="ml10 color-theme" style="{{themeObject.colorStyle}}">¥{{item.truePrice}}</text>
            </view>
            <view class="row-item flex_left">
              <view class="flex_left color-gray">购买数量</view>
              <view class="flex_cell flex_right">
                <view class="app-number">
                  <view
                    data-data="{{item}}"
                    data-index="{{cindex}}"
                    catchtap="subNumber"
                    :class="{'disabled': item.disabledMin}"
                    class="cell sub-cell">
                    <text class="sub al al-sub"></text>
                  </view>
                  <view class="cell input-cell">{{item.quantity}}</view>
                  <view
                    data-data="{{item}}"
                    data-index="{{cindex}}"
                    catchtap="addNumber"
                    :class="{'disabled': item.disabledMax}"
                    class="cell plus-cell">
                    <text class="plus al al-plus"></text>
                  </view>
                </view>
              </view>
            </view>
            <!-- <block wx:if="{{!clickCommCard && item.afterCard}}">
              <view wx:if="{{item.cards.length}}" class="row-item flex_left card-area" data-data="{{item}}" data-index="{{cindex}}" @tap.stop="popupCardList">
                <view class="flex_left color-gray">优惠券</view>
                <view class="flex_cell flex_right" style="{{themeObject.colorStyle}}" wx:if="{{item.cardInfo}}">满{{item.cardInfo.ordermoney}}减{{item.cardInfo.money}}<text class="al al-mjiantou-copy2"></text></view>
                <view class="flex_cell flex_right" style="{{themeObject.colorStyle}}" wx:else>请选择<text class="al al-mjiantou-copy2"></text></view>
              </view>
              <view wx:else class="row-item flex_left card-area">
                <view class="flex_left color-gray">优惠券</view>
                <view class="flex_cell flex_right">无可用</view>
              </view>
            </block> -->
            <block wx:if="{{item.disPostageArea && dcType == 1}}">
              <view class="row-item db-flex" wx:if="{{item.postPostage && item.postPostage != '' && item.allowSend}}">
                <view class="color-gray">运费</view>
                <view class="flex_cell flex_right">
                  <text wx:if="{{item.postPostage == 0}}">包邮</text>
                  <text wx:else>￥{{ item.postPostage }}</text>
                </view>
              </view>
              <view class="row-item color-theme flex_right" style="{{themeObject.colorStyle}}" wx:if="{{!item.allowSend}}">该地区不在派送范围内</view>
            </block>
            <!-- <block wx:if="{{saveMoneyMode && userInfo.regwid && userInfo.bindstatus && item.shengPrice && item.shengPrice != '' && item.shengPrice != '0.00'}}">
              <view class="row-item db-flex">
                <view class="color-gray">合伙人省</view>
                <view class="flex_cell flex_right" style="{{themeObject.colorStyle}}">-￥{{item.shengPrice}}</view>
              </view>
            </block> -->
            <view class="row-item flex_left" wx:if="{{showRemark && !popupShow}}">
              <view class="color-gray pr10">备注</view>
              <view class="flex_cell flex_left">
                <input class="w_100" data-data="{{item}}" data-index="{{cindex}}" bindinput="keyupContent" placeholder="备注" maxlength="30"/>
              </view>
            </view>
          </view>
        </view>
      </repeat>
      <view class="box-area mt10" wx:if="{{dcType === 3}}">
        <view class="row-item flex_left">
          <view class="color-gray pr10">桌号</view>
          <view class="flex_cell flex_left">
            <text wx:if="{{options.tableid}}">{{options.tableid}}</text>
            <input wx:else class="w_100" bindinput="keyupZhuohao" placeholder="桌号" maxlength="30"/>
          </view>
        </view>
      </view>
      <view class="box-area mt10" wx:if="{{commCardList.length && dcType != 3}}">
        <view class="box-item">
          <view wx:if="{{commCardList.length}}" class="row-item flex_left card-area" @tap.stop="popupCommCardList">
            <view class="flex_left color-gray">优惠券</view>
            <view class="flex_cell flex_right" style="{{themeObject.colorStyle}}" wx:if="{{clickCommCard}}">满{{clickCommCard.ordermoney}}减{{clickCommCard.money}}<text class="al al-mjiantou-copy2"></text></view>
            <view class="flex_cell flex_right" style="{{themeObject.colorStyle}}" wx:else>请选择<text class="al al-mjiantou-copy2"></text></view>
          </view>
          <view wx:else class="row-item flex_left card-area">
            <view class="flex_left color-gray">优惠券</view>
            <view class="flex_cell flex_right">无可用</view>
          </view>
        </view>
      </view>
      <view class="box-area mt10" @tap="clickCredit" wx:if="{{useCredit > 0}}">
        <view class="box-item">
          <view class="row-item flex_left">
            <view class="flex_left flex_cell color-gray">可用{{useCredit}}金币抵扣{{deductMoney}}元</view>
            <view class="flex_right">
              <view :class="{'checked': clickedCredit}" class="app-switch" style="{{clickedCredit ? themeObject.bgStyle + themeObject.borderStyle : ''}}">
                <view class="ico" style="{{clickedCredit ? themeObject.switchShadowStyle : ''}}"></view>
              </view>
            </view>
          </view>
        </view>
      </view>
    </block>
    <view class="blank-area"></view>
  </view>
  <block wx:if="{{afterLoad}}">
    <view wx:if="{{isClose}}" class="page-box-bottom flex_center" :class="{'iphone' : isIpx}" style="background-color:#434345;color:#fff;">很抱歉，本店已打烊</view>
    <view wx:elif="{{disPostageArea || dcType}}" class="page-box-bottom flex_right" :class="{'iphone' : isIpx}">
      <view>
        <text>合计</text>
        <text class="color-theme" style="{{themeObject.colorStyle}}">￥{{payPrice}}</text>
      </view>
      <view class="box-btn bg-theme color-white" style="{{themeObject.bgStyle}}" wx:if="{{allowSend}}" @tap="submitOrder">下单</view>
      <view class="box-btn bg-gray color-white" wx:else>该地区无法派送</view>
    </view>
  </block>
  <popup :show.sync="popupShow" @close.user="cancel" height="60%">
    <popup-header
      leftText="关闭"
      @on-click-left.user="cancel"
      rightText="确定"
      @on-click-right.user="cancel">
    </popup-header>
    <scroll-view scroll-y="true">
      <view class="cardlist">
        <repeat for="{{cardList}}" item="item" index="index">
          <block wx:if="{{(clickProduct.cardPrice >= item.ordermoney && clickProduct.cardPrice > item.money) && ((clickProduct.cardPrice - item.money > 0))}}">
            <view @tap.stop="cardClick({{item}},{{index}})" class="scroll_item radio_check" style="{{themeObject.bgStyle}}">
              <view class="flex_cell txt-cell" style="overflow:visible">
                <view class="font20 mb5 clamp1 txt">满{{item.ordermoney}}减{{item.money}}</view>
                <view class="font12">到期时间 {{item.deadline_str}}</view>
                <view class="ball ball-up"></view>
                <view class="ball ball-down"></view>
              </view>
              <view class="btn-cell flex_center">
                <view class="vux-check-icon font14 pl10 color-gray">
                  <view class="circle-icon">
                    <icon type="success_no_circle" size="16" color="#eb6b5e" wx:if="{{item.checked}}"></icon>
                  </view>
                </view>
              </view>
            </view>
          </block>
          <block wx:else>
            <view class="scroll_item radio_check disabled-state" style="{{themeObject.bgStyle}}">
              <view class="flex_cell txt-cell" style="overflow:visible">
                <view class="font20 mb5 clamp1 txt">满{{item.ordermoney}}减{{item.money}}</view>
                <view class="font14 mb5 clamp1 txt">订单金额不满足使用条件</view>
                <view class="font12">到期时间 {{item.deadline_str}}</view>
                <view class="ball ball-up"></view>
                <view class="ball ball-down"></view>
              </view>
              <view class="btn-cell flex_center"></view>
            </view>
          </block>
        </repeat>
      </view>
    </scroll-view>
  </popup>
  <popup1 :show.sync="showCommCard" @close.user="closeCommPop" height="60%">
    <popup-header1
      leftText="关闭"
      @on-click-left.user="closeCommPop"
      rightText="确定"
      @on-click-right.user="closeCommPop">
    </popup-header1>
    <scroll-view scroll-y="true">
      <view class="cardlist">
        <repeat for="{{commCardList}}" item="item" index="index">
          <block wx:if="{{orderTruePrice >= item.ordermoney && orderTruePrice - totalQuantity * 0.01 > item.money}}">
            <view @tap.stop="commCardClick({{item}},{{index}})" class="scroll_item radio_check" style="{{themeObject.bgStyle}}">
              <view class="flex_cell txt-cell" style="overflow:visible">
                <view class="font20 mb5 clamp1 txt">满{{item.ordermoney}}减{{item.money}}</view>
                <view class="font12">到期时间 {{item.deadline_str}}</view>
                <view class="ball ball-up"></view>
                <view class="ball ball-down"></view>
              </view>
              <view class="btn-cell flex_center">
                <view class="vux-check-icon font14 pl10 color-gray">
                  <view class="circle-icon">
                    <icon type="success_no_circle" size="16" color="#eb6b5e" wx:if="{{item.checked}}"></icon>
                  </view>
                </view>
              </view>
            </view>
          </block>
          <block wx:else>
            <view class="scroll_item radio_check disabled-state" style="{{themeObject.bgStyle}}">
              <view class="flex_cell txt-cell" style="overflow:visible">
                <view class="font20 mb5 clamp1 txt">满{{item.ordermoney}}减{{item.money}}</view>
                <view class="font14 mb5 clamp1 txt">订单金额不满足使用条件</view>
                <view class="font12">到期时间 {{item.deadline_str}}</view>
                <view class="ball ball-up"></view>
                <view class="ball ball-down"></view>
              </view>
              <view class="btn-cell flex_center"></view>
            </view>
          </block>
        </repeat>
      </view>
    </scroll-view>
  </popup1>
  <popup2 :show.sync="showMdPop" @close.user="closeMdPop" height="60%">
    <popup-header2
      leftText="关闭"
      @on-click-left.user="closeMdPop"
      rightText="确定"
      @on-click-right.user="confirmMd">
    </popup-header2>
    <scroll-view scroll-y="true">
      <view class="mdpop-list">
        <repeat for="{{mdList}}" item="item" index="index">
          <label class="radio scroll_item flex_left" @tap.stop="clickMd({{item}},{{index}})">
            <view class="flex_left radio-cell">
              <radio class="dotradio" value="{{item.id}}" checked="{{item.checked}}"/>
            </view>
            <view class="flex_cell flex_left">
              <view class="w_100">
                <view class="clamp1 font18 bold">{{item.title}}</view>
                <view>{{item.address}}</view>
              </view>
            </view>
            <view class="flex_right ml10">
              <view>
                <view class="font12 color-gray align_center">距您</view>
                <view class="font12 color-gray align_center">{{item.distance}}</view>
              </view>
            </view>
          </label>
        </repeat>
      </view>
    </scroll-view>
  </popup2>
</template>
<script>
import Util from '@/libs/util'
import Time from '@/libs/time'
import wepy from 'wepy'
import Popup from '@/components/popup'
import PopupHeader from '@/components/popup-header'
import XNumber from '@/components/x-number'
import Config from '@/config'

export default class AddOrder extends wepy.page {
  config = {
    navigationBarTitleText: '确认订单'
  }

  components = {
    'x-number1': XNumber,
    'x-number2': XNumber,
    'popup': Popup,
    'popup-header': PopupHeader,
    'popup1': Popup,
    'popup-header1': PopupHeader,
    'popup2': Popup,
    'popup-header2': PopupHeader
  }

  data = {
    userInfo: {},
    retailerInfo: {},
    options: {},
    query: {},
    postage: null,
    postPostage: 0,
    payPrice: '0.00',
    orderTruePrice: 0,
    min: 1,
    max: 1,
    maxQuantity: 1,
    selectAddress: null,
    product: {},
    showpopup: false,
    addressId: '',
    quantity: 1,
    shopid: 0,
    content: '',
    submiting: false,
    cardList: [],
    animationCards: {},
    cheap: 0,
    cardtip: '请选择',
    cardChecked: [],
    cardDisabled: [],
    cardPanelMoveUp: false,
    cardid: null,
    popupShow: false,
    retailer: null,
    hiddenComment: false,
    isIpx: false,
    systemInfo: null,
    curOrder: {},
    cardPrice: '0.00',
    buyType: 'online',
    AllowZiti: false,
    payData: {},
    payIng: false,
    allowSend: true,
    disPostageArea: false,
    isFirst: true,
    sellerUser: null,
    cardInfo: null,
    afterCard: false,
    clickBuytype: '',
    showRemark: false,
    MiniInfo: {},
    themeObject: {},
    listData: [],
    disList: false,
    clickProduct: null,
    clickIndex: 0,
    shengPrice: '0.00',
    commCardList: [],
    clickCommCard: null,
    showCommCard: false,
    totalQuantity: 0,
    clickedCredit: false,
    useCredit: 0,
    deductMoney: 0,
    saveMoneyMode: false,
    dcType: 1, // 1: 外卖 2: 自取  3: 堂食
    distance: 0,
    sysParams: {},
    showMdPop: false,
    mdList: [],
    selectedMd: null,
    userLocation: {},
    isClose: false,
    afterLoad: false
  }
  ajaxOrder (postData) {
    postData.ordertype = this.dcType
    if (this.selectedMd) {
      postData.storeid = this.selectedMd.id
    }
    if (this.selectedCard) {
      postData.cardid = this.selectedCard.id
    }
    if (this.clickCommCard) {
      postData.commoncardid = this.clickCommCard.id
    }
    if (this.clickedCredit) {
      postData.credit = this.useCredit
    }
    let shops = []
    for (let i = 0; i < this.listData.length; i++) {
      let curd = this.listData[i]
      let pushParama = {
        id: curd.id,
        quantity: curd.quantity,
        content: curd.contentVal
      }
      if (this.dcType === 1) pushParama.postage = curd.postPostage
      if (curd.selectedCard) {
        pushParama.cardid = curd.selectedCard.id
      }
      shops.push(pushParama)
    }
    let ajaxData = {...postData, shops: shops, wid: this.globalData.Wid}
    if (this.dcType === 3) ajaxData.tableid = this.tableid
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/cart/cartToOrder`,
      data: ajaxData,
      method: 'POST'
    }).then(res => {
      const data = res.data
      const timeout = Util.delay(data.msg)
      wepy.showToast({
        title: data.msg,
        icon: 'none',
        duration: timeout
      })
      if (data.code === 0) {
        this.globalData.userInfo.cartcount = data.cartcount
        this.userInfo.cartcount = data.cartcount
        this.$parent.globalData = this.globalData
        setTimeout(() => {
          if (this.dcType === 3) {
            wepy.redirectTo({url: `/packageD/pages/userOrders`})
          } else {
            if (data.id) {
              wepy.redirectTo({url: `/packageB/pages/pay?id=${data.id}&clickBuytype=${this.clickBuytype}`})
            } else {
              wepy.redirectTo({url: `/packageB/pages/paySuccess`})
            }
          }
          this.submiting = false
          this.$apply()
        }, timeout)
      } else {
        this.submiting = false
      }
    })
  }
  uploadAddress (address) {
    const params = {
      linkman: address.userName,
      telephone: address.telNumber,
      address: address.detailInfo,
      isdefault: 1,
      province: address.provinceName,
      city: address.cityName,
      counties: address.countyName,
      postalCode: address.postalCode,
      do: 'add'
    }
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/address/add`,
      data: params,
      method: 'POST'
    }).then(res => {
      if (res.data.code === 0) {
        const data = res.data.data
        this.selectAddress = data
        this.selectAddress.fulladdress = `${data.province}${data.city}${data.counties}${data.address}`
        this.changeAddress()
        this.$apply()
        wepy.showToast({
          title: '选择成功',
          icon: 'none'
        })
      } else {
        wepy.showToast({
          title: '选择地址时出错',
          icon: 'none'
        })
      }
    })
  }
  getData () {
    let ids = decodeURIComponent(this.query.cartid)
    ids = decodeURIComponent(ids)
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/cart/cartList`,
      data: {ids: ids.split(','), wid: this.globalData.Wid},
      method: 'post'
    }).then(res => {
      if (!res) return
      const data = res.data
      let retdata = data.data ? data.data : data
      this.afterLoad = true
      this.totalQuantity = 0
      for (let i = 0; i < retdata.length; i++) {
        let curd = retdata[i]
        if (curd.quantity > curd.storage) {
          retdata[i].quantity = curd.storage
        }
        if (curd.quantity <= 1) {
          curd.disabledMin = true
        }
        this.totalQuantity += curd.quantity
        if (curd.productoptions && curd.productoptions.length) {
          for (let j = 0; j < curd.productoptions.length; j++) {
            if (curd.productoptions[j].id === curd.foid) {
              curd.selectedOption = curd.productoptions[j]
              if (curd.productoptions[j].storage === 1) {
                curd.inputDisalbed = true
              }
              if (curd.quantity >= curd.productoptions[j].storage) {
                curd.disabledMax = true
              }
              break
            }
          }
        } else {
          if (curd.storage === 1) {
            curd.inputDisalbed = true
          }
          if (curd.quantity >= curd.storage) {
            curd.disabledMax = true
          }
        }
        retdata[i].truePrice = (parseFloat(curd.commonprice.replace(/,/g, '')) * curd.quantity).toFixed(2)
        // if (curd.sheng && curd.sheng !== '' && curd.sheng !== '0.00') {
        //   let sheng = parseFloat(curd.sheng.replace(/,/g, '')) * curd.quantity
        //   retdata[i].shengPrice = sheng.toFixed(2)
        // }
        retdata[i].postPostage = parseFloat(curd.postage.replace(/,/g, '')).toFixed(2)
        let total1 = parseFloat(curd.memberprice.replace(/,/g, '')) * curd.quantity
        if (curd.postage) {
          total1 += parseFloat(curd.postage.replace(/,/g, ''))
        }
        retdata[i].cardPrice = total1
      }
      this.listData = retdata
      this.handleCredit()
      this.disList = true
      this.computePrice()
      if (this.isFirst) {
        this.getAddressList()
        this.isFirst = false
      }
      this.$apply()
    })
  }
  computePrice () {
    let payPrice = 0
    let otPrice = this.orderTruePrice
    this.totalQuantity = 0
    for (let i = 0; i < this.listData.length; i++) {
      let curd = this.listData[i]
      let total = 0
      total += parseFloat(curd.memberprice.replace(/,/g, '')) * curd.quantity
      this.totalQuantity += curd.quantity
      this.listData[i].cardPrice = total
      if (this.dcType === 1 && curd.postPostage) {
        let curpostage = curd.postPostage
        total += parseFloat(curpostage)
      }
      this.listData[i].orderPrice = total
      if (this.clickCommCard) {
        if (this.dcType === 1 && curd.postPostage) {
          let curpostage = curd.postPostage
          otPrice += parseFloat(curpostage)
        }
      } else {
        if (curd.selectedCard) {
          let postageStr = '0'
          if (this.dcType === 1) postageStr = `${curd.postPostage}`
          let cha = parseFloat(curd.orderPrice) - parseFloat(postageStr.replace(/,/g, '')) - parseFloat(curd.selectedCard.money)
          cha = cha < 0 ? 0 : cha
          payPrice += cha + parseFloat(postageStr.replace(/,/g, ''))
        } else {
          payPrice += total
        }
      }
    }
    if (this.clickedCredit) {
      this.payPrice = (otPrice - this.deductMoney).toFixed(2)
    } else {
      if (this.clickCommCard) {
        this.payPrice = (otPrice - parseFloat(this.clickCommCard.money.toString().replace(/,/g, ''))).toFixed(2)
      } else {
        this.payPrice = payPrice.toFixed(2)
        this.handleCard()
      }
    }
    this.$apply()
  }
  handleCard () {
    this.totalQuantity = 0
    for (let j = 0; j < this.listData.length; j++) {
      let curProduct = this.listData[j]
      let curCardPrice = curProduct.cardPrice
      let cards = curProduct.cards
      let haveChecked = false
      this.totalQuantity += curProduct.quantity
      if (cards && cards.length) {
        if (!this.afterClickCard) {
          for (let i = 0; i < cards.length; i++) {
            const item = cards[i]
            cards[i].deadline_str = new Time(cards[i].deadline * 1000).dateFormat('yyyy-MM-dd hh:mm')
            if (!haveChecked) {
              if (curCardPrice >= item.ordermoney && curCardPrice > item.money && (curCardPrice - item.money) > 0) {
                curProduct.selectedCard = item
                cards[i].checked = true
                let postageStr = '0'
                if (this.dcType === 1) postageStr = `${curProduct.postPostage}`
                let cha = parseFloat(curProduct.orderPrice) - parseFloat(postageStr.replace(/,/g, '')) - parseFloat(item.money)
                cha = cha < 0 ? 0 : cha
                curProduct.payPrice = (cha + parseFloat(postageStr.replace(/,/g, ''))).toFixed(2)
                haveChecked = true
              }
            }
          }
        }
      }
      curProduct.cardList = cards
      curProduct.afterCard = true
      curProduct.cardInfo = curProduct.selectedCard
    }
    this.afterClickCard = false
    this.$apply()
  }
  changeAddress () {
    if (!this.selectAddress || !this.selectAddress.id) return false
    const selectedProvince = this.selectAddress.province
    let allAllowSend = true
    this.orderTruePrice = 0
    for (let k = 0; k < this.listData.length; k++) {
      let curd = this.listData[k]
      const postageSetting = curd.postageSetting
      let allowSend = true
      let isset = false
      let postPostage = 0
      if (postageSetting && postageSetting.length) {
        for (let i = 0; i < postageSetting.length; i++) {
          const curSet = postageSetting[i]
          const curProvince = curSet.province
          let isTw = false
          let isAm = false
          if ((curProvince.indexOf('臺灣') > -1 || curProvince.indexOf('台湾') > -1) && (selectedProvince.indexOf('臺灣') > -1 || selectedProvince.indexOf('台湾') > -1)) {
            isTw = true
          } else if ((curProvince.indexOf('澳門') > -1 || curProvince.indexOf('澳门') > -1) && (selectedProvince.indexOf('澳門') > -1 || selectedProvince.indexOf('澳门') > -1)) {
            isAm = true
          }
          if (selectedProvince === curProvince || selectedProvince.indexOf(curProvince) > -1 || curProvince.indexOf(selectedProvince) > -1 || isTw || isAm) {
            if (curSet.postage !== -1 && curSet.postage !== '-1' && curSet.postage !== '-1.00') {
              if (curSet.standard === 0) {
                postPostage = curSet.postage.replace(/,/g, '')
              } else {
                let addcount = curSet.addcount
                let curp = curSet.postage.replace(/,/g, '')
                let count = Math.ceil(curd.quantity / addcount)
                postPostage = (count * parseFloat(curp)).toFixed(2)
              }
              allowSend = true
            } else {
              allowSend = false
              allAllowSend = false
            }
            isset = true
            break
          }
        }
      }
      this.orderTruePrice += parseFloat(curd.memberprice.replace(/,/g, '')) * curd.quantity
      if (!isset) {
        this.listData[k].postPostage = curd.postage.replace(/,/g, '')
      } else {
        this.listData[k].postPostage = postPostage
      }
      this.listData[k].allowSend = allowSend
      this.listData[k].disPostageArea = true
    }
    this.allowSend = allAllowSend
    this.disPostageArea = true
    this.$apply()
    this.computePrice()
  }
  getAddressList () {
    const address = this.$parent.globalData.address
    if (address && address.id) {
      this.selectAddress = address
      this.changeAddress()
      this.$apply()
    } else {
      wepy.request({
        url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/address/getList`
      }).then(res => {
        if (!res) return
        const data = res.data
        const retdata = data.data ? data.data : data
        if (retdata.length) {
          this.selectAddress = retdata[0]
        }
        this.changeAddress()
        this.$apply()
      })
    }
  }
  getRetailer () {
    // if (Config.Wid !== this.globalData.Wid) {
    //   wepy.request({
    //     url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/retailer/info`,
    //     data: {uid: this.globalData.Wid, appid: Config.AppId}
    //   }).then(res => {
    //     const data = res.data
    //     if (data.code === 0) {
    //       this.sellerUser = data.data
    //       this.$apply()
    //     }
    //   })
    // }
  }
  async onLoad (options) {
    this.query = options
    this.options = options
    if (this.options.tableid) this.tableid = this.options.tableid
    this.$parent.globalData.address = null
    if (options.dctype) {
      this.dcType = parseInt(options.dctype)
    }
    if (this.$parent.globalData.flag.bokaAuth) {
      this.handlePageData()
    } else {
      this.$parent.loadCallback = () => {
        this.handlePageData()
      }
    }
  }

  handlePageData () {
    this.globalData = this.$parent.globalData
    Util.appInit(this.globalData, this)
    this.userInfo = this.globalData.userInfo
    this.MiniInfo = this.globalData.MiniInfo
    this.sysParams = this.globalData.SystemParams
    this.isClose = Util.checkClose(this.sysParams.closestore)
    this.mdList = this.globalData.Store
    let orderRemark = this.globalData.SystemParams.OrderRemark
    this.showRemark = orderRemark ? parseInt(orderRemark) : false
    let saveMoneyMode = this.globalData.SystemParams.SaveMoneyMode
    this.saveMoneyMode = saveMoneyMode ? parseInt(saveMoneyMode) : false
    if (this.options.tableid) {
      if (this.options.storeid) {
        let storeid = parseInt(this.options.storeid)
        for (let i = 0; i < this.mdList.length; i++) {
          let curMd = this.mdList[i]
          if (curMd.id === storeid) {
            this.selectedMd = curMd
            break
          }
        }
      } else {
        this.selectedMd = this.mdList[0]
      }
    } else {
      wx.getLocation({
        type: 'gcj02',
        success: (res) => {
          console.log('======================获取微信位置***************************8')
          // 我的位置 {accuracy: 65, errMsg: 'getLocation:ok', horizontalAccuracy: 65, latitude: 28.24595, longitude: 113.08093, speed: -1 verticalAccuracy: 65}
          console.log(res)
          this.userLocation = {latitude: res.latitude, longitude: res.longitude}
          let minIndex = 0
          let minDistance = 0
          for (let i = 0; i < this.mdList.length; i++) {
            let curMd = this.mdList[i]
            curMd.distance = Util.getDistance(res.latitude, res.longitude, curMd.latitude, curMd.longitude)
            let dis = parseFloat(curMd.distance.replace('m', ''))
            if (curMd.distance.indexOf('km') > -1) {
              dis = parseFloat(curMd.distance.replace('km', '')) * 1000
            }
            if (i === 0) {
              minIndex = 0
              minDistance = dis
            } else if (dis < minDistance) {
              minIndex = i
              minDistance = dis
            }
            if (this.options.storeid && parseInt(this.options.storeid) === curMd.id) {
              this.selectedMd = curMd
            }
          }
          if (!this.selectedMd) this.selectedMd = this.mdList[minIndex]
        },
        fail: (res) => {
          console.log('======================获取微信位置失败***************************8')
          // 我的位置 {accuracy: 65, errMsg: 'getLocation:ok', horizontalAccuracy: 65, latitude: 28.24595, longitude: 113.08093, speed: -1 verticalAccuracy: 65}
          console.log(res)
          if (res.errMsg.indexOf('getLocation:fail') > -1) {
            wepy.showToast({
              title: '获取位置信息失败，请查看您的手机定位是否开启',
              icon: 'none',
              duration: 2000
            })
          }
          if (this.options.storeid) {
            let storeid = parseInt(this.options.storeid)
            for (let i = 0; i < this.mdList.length; i++) {
              let curMd = this.mdList[i]
              if (curMd.id === storeid) {
                this.selectedMd = curMd
                break
              }
            }
          } else {
            this.selectedMd = this.mdList[0]
          }
        }
      })
    }
    this.getData()
    this.getRetailer()
    this.getCommList()
    wepy.getSystemInfo().then(res => {
      if (res.model.substring(0, res.model.indexOf('X')) + 'X' === 'iPhone X') {
        this.isIpx = true
      }
      this.$apply()
    })
  }
  handleShowData () {
    this.clickCommCard = null
    this.contentVal = ''
    this.getAddressList()
    if (this.inHide) {
      this.inHide = false
      this.isClose = Util.checkClose(this.sysParams.closestore)
    }
    this.$apply()
  }
  onShow () {
    if (this.$parent.globalData.flag.bokaAuth) {
      this.handleShowData()
    } else {
      this.$parent.showCallback = () => {
        this.handleShowData()
      }
    }
  }
  onUnload () {
    this.inHide = true
    this.selectedCard = null
    this.cardInfo = null
    this.$apply()
  }
  onHide () {
    this.inHide = true
    this.selectedCard = null
    this.cardInfo = null
    this.$apply()
  }
  handleNumber (item, index) {
    if (this.clickCommCard) {
      this.clickCommCard = null
      for (let i = 0; i < this.commCardList.length; i++) {
        if (this.commCardList[i].checked) {
          delete this.commCardList[i].checked
          break
        }
      }
    }
    if (item.quantity === 1) {
      item.disabledMin = true
    } else if (item.quantity > 1) {
      delete item.disabledMin
    }
    if (item.productoptions && item.productoptions.length) {
      if (item.quantity >= item.selectedOption.storage) {
        item.quantity = item.selectedOption.storage
        item.disabledMax = true
      } else {
        delete item.disabledMax
      }
    } else {
      if (item.quantity >= item.storage) {
        item.quantity = item.storage
        item.disabledMax = true
      } else {
        delete item.disabledMax
      }
    }
    item.truePrice = (parseFloat(item.commonprice.replace(/,/g, '')) * item.quantity).toFixed(2)
    // if (item.sheng && item.sheng !== '' && item.sheng !== '0.00') {
    //   let sheng = parseFloat(item.sheng.replace(/,/g, '')) * item.quantity
    //   item.shengPrice = sheng.toFixed(2)
    // }
    item.selectedCard = null
    item.cardInfo = null
    this.listData[index] = item
    this.afterClickCard = true
    this.handleCredit()
    this.changeAddress()
    this.updateIng = false
    this.$apply()
  }
  getCommList () {
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/card/canUseCard`,
      // data: {fid: Config.Fid, from: 'user', used: 0, type: 'factorycardcommon', pagestart: 0, limit: 100},
      data: {type: 'common', wid: this.globalData.Wid},
      method: 'post'
    }).then(res => {
      const data = res.data
      let retdata = data.data ? data.data : data
      for (let i = 0; i < retdata.length; i++) {
        retdata[i].deadline_str = new Time(retdata[i].deadline * 1000).dateFormat('yyyy-MM-dd hh:mm')
      }
      this.commCardList = retdata
      this.$apply()
    })
  }
  handleCredit () {
    let ocredit = 0
    for (let i = 0; i < this.listData.length; i++) {
      let item = this.listData[i]
      ocredit += item.maxcredits * item.quantity
    }
    if (this.userInfo.credit < ocredit) {
      ocredit = this.userInfo.credit
    }
    this.useCredit = ocredit
    this.deductMoney = (ocredit / 100).toFixed(2)
  }
  methods = {
    switchType (val) {
      this.dcType = parseInt(val)
      this.$apply()
    },
    clickCredit () {
      this.clickedCredit = !this.clickedCredit
      if (this.clickCommCard) {
        this.clickCommCard = null
        for (let i = 0; i < this.commCardList.length; i++) {
          if (this.commCardList[i].checked) {
            delete this.commCardList[i].checked
            break
          }
        }
      }
      for (let i = 0; i < this.listData.length; i++) {
        let item = this.listData[i]
        item.truePrice = (parseFloat(item.commonprice.replace(/,/g, '')) * item.quantity).toFixed(2)
        // if (item.sheng && item.sheng !== '' && item.sheng !== '0.00') {
        //   let sheng = parseFloat(item.sheng.replace(/,/g, '')) * item.quantity
        //   item.shengPrice = sheng.toFixed(2)
        // }
        item.selectedCard = null
        item.cardInfo = null
      }
      this.afterClickCard = true
      this.changeAddress()
      this.$apply()
    },
    keyupZhuohao (e) {
      this.tableid = e.detail.value
    },
    keyupContent (e) {
      const dataset = e.currentTarget.dataset
      let index = dataset.index
      this.listData[index].contentVal = e.detail.value
    },
    cancel () {
      this.popupShow = false
      this.hiddenComment = false
    },
    popupCardList (e) {
      const dataset = e.currentTarget.dataset
      let curProduct = dataset.data
      const index = dataset.index
      if (!curProduct.cardInfo) {
        for (let i = 0; i < curProduct.cards.length; i++) {
          if (curProduct.cards[i].checked) {
            delete curProduct.cards[i].checked
            break
          }
        }
      }
      this.clickProduct = curProduct
      this.clickIndex = index
      this.cardList = curProduct.cards
      this.popupShow = true
      this.hiddenComment = true
      this.$apply()
    },
    closeCommPop () {
      this.showCommCard = false
    },
    popupCommCardList () {
      this.showCommCard = true
    },
    cardClick (item, index) {
      for (let i = 0; i < this.cardList.length; i++) {
        if (this.cardList[i].checked) {
          this.cardList[i].checked = false
          break
        }
      }
      let checked = !item.checked
      if (checked) {
        this.clickProduct.selectedCard = item
        this.clickProduct.cardInfo = item
      } else {
        this.clickProduct.selectedCard = null
        this.clickProduct.cardInfo = null
      }
      this.cardList[index].checked = checked
      this.listData[this.clickIndex] = this.clickProduct
      this.afterClickCard = true
      this.computePrice()
      this.$apply()
    },
    commCardClick (item, index) {
      for (let i = 0; i < this.commCardList.length; i++) {
        if (this.commCardList[i].checked) {
          this.commCardList[i].checked = false
          break
        }
      }
      let checked = !item.checked
      if (checked) {
        this.clickCommCard = item
      } else {
        this.clickCommCard = null
      }
      this.commCardList[index].checked = checked
      this.clickedCredit = false
      this.computePrice()
      this.$apply()
    },
    showAddress (e) {
      wepy.navigateTo({url: '/packageB/pages/address?mod=inner'})
    },
    submitOrder () {
      if (this.submiting) return false
      let params = {}
      if (this.dcType === 1 && !this.selectAddress) {
        wepy.showToast({
          title: '请选择地址',
          icon: 'none'
        })
        return false
      }
      if (this.dcType === 3 && (!this.tableid || this.tableid === '')) {
        wepy.showToast({
          title: '请输入桌号',
          icon: 'none'
        })
        return false
      }
      this.submiting = true
      this.isShowLoading = true
      if (this.dcType === 1) params.addressid = this.selectAddress.id
      this.payData = params
      this.ajaxOrder(this.payData)
      this.$apply()
    },
    subNumber (e) {
      const dataset = e.currentTarget.dataset
      let item = dataset.data
      let index = dataset.index
      if (this.updateIng || item.disabledMin) return false
      this.updateIng = true
      item.quantity--
      this.handleNumber(item, index)
    },
    addNumber (e) {
      const dataset = e.currentTarget.dataset
      let item = dataset.data
      let index = dataset.index
      if (this.updateIng || item.disabledMax) return false
      this.updateIng = true
      item.quantity++
      this.handleNumber(item, index)
    },
    blurNumber (e) {
      const dataset = e.currentTarget.dataset
      let item = dataset.data
      let index = dataset.index
      if (this.updateIng) return false
      let val = e.detail.value
      let numReg = /^[1-9]\d*$/
      if (val === '' || isNaN(val) || !numReg.test(val) || parseInt(val) <= 0) {
        item.quantity = 1
      } else {
        item.quantity = parseInt(e.detail.value)
      }
      this.handleNumber(item, index)
    },
    closeMdPop () {
      this.showMdPop = false
      this.$apply()
    },
    chooseMd () {
      this.clickedMd = this.selectedMd
      for (let i = 0; i < this.mdList.length; i++) {
        if (this.mdList[i].id === this.selectedMd.id) {
          this.mdList[i].checked = true
        } else {
          this.mdList[i].checked = false
        }
      }
      this.showMdPop = true
      this.$apply()
    },
    clickMd (item, index) {
      if (!item.checked) {
        for (let i = 0; i < this.mdList.length; i++) {
          if (this.mdList[i].checked) {
            this.mdList[i].checked = false
            break
          }
        }
        let checked = !item.checked
        this.clickedMd = item
        this.mdList[index].checked = checked
      }
      this.$apply()
    },
    confirmMd () {
      if (this.clickedMd && this.clickedMd.id) {
        this.selectedMd = this.clickedMd
        this.distance = Util.getDistance(this.userLocation.latitude, this.userLocation.longitude, this.selectedMd.latitude, this.selectedMd.longitude)
      }
      this.showMdPop = false
      this.$apply()
    }
  }
}
</script>
