<style lang="less">
@import '../styles/variable.less';
.cardlist{
  padding:0rpx 40rpx;
  .scroll_item{
    width: 100%;position:relative;color:#fff;
    display: flex;justify-content: center;align-items: center;
    margin-top:40rpx;
  }
  .scroll_item.grayitem{background-color: #999;}
  .scroll_item .txt{color:#fff;}
  .scroll_item.grayitem .txt{color:orange;}
  .txt-cell{position:relative;padding-top:30rpx;padding-bottom:30rpx;padding-left:20rpx;box-sizing: border-box;}
  .txt-cell:after{
    content:"";display:block;
    border-right:#fff 1px dashed;
    position: absolute;right: 0;top: 0;bottom:0px;
    -webkit-transform: scaleX(0.5) translateX(0.5px);
    transform: scaleX(0.5) translateX(0.5px);
    -webkit-transform-origin: 0% 0%;
    transform-origin: 0% 0%;
  }
  .scroll_item .ball{
    position: absolute;
    right: -28rpx;
    width: 60rpx;
    height: 60rpx;
    background-color: #fff;
    border-radius: 50%;
  }
  .scroll_item .ball-up{top: -30rpx;}
  .scroll_item .ball-down{bottom: -30rpx;}
  .scroll_item .pic{width:100rpx;}
  .scroll_item .pic image{width:80rpx;height:80rpx;border-radius:50%;}
  .btn-cell{width:180rpx;padding-top:30rpx;padding-bottom:30rpx;box-sizing: border-box;}
  .btn-cell .al{font-size:100rpx;}
  .btn-cell .icon-chat{margin-top:8rpx;}
  .rbtn{display:inline-block;padding:10rpx;border-radius:10rpx;background-color: #fff;}
  .radio_check .vux-check-icon > view{background-color: #fff;display:inline-block;}
  .vux-check-icon .circle-icon{width:22px;height:22px;border-radius:50%;display:flex !important;justify-content: center; align-items: center;}
  .vux-check-icon .circle-icon .dot{width:20rpx;height:20rpx;border-radius:50%;background-color:#eb6b5e;}
  .vux-check-icon icon{vertical-align:middle;}
}
.vux-popup-dialog scroll-view {position:relative;height: calc(~"100% - 44px")}
.qypay-page{
  padding:20rpx;box-sizing:border-box;width:100%;height:100%;overflow-y:auto;
  .blank-area{height:120rpx;}
  .txt-cell{width:200rpx;}
  .box-area{
    padding:0;
    .box-item{
      background-color:#fff;border-radius:10rpx;padding:20rpx;box-sizing:border-box;
      .row-item{position:relative;}
      .row-item:not(:last-child):after{
        content:"";display:block;
      	background-color:#eaeaea;height:1px;overflow:hidden;
      	position: absolute;left: 0;right: 0;bottom:0px;
      	-webkit-transform: scaleY(0.5) translateY(0.5px);
      	transform: scaleY(0.5) translateY(0.5px);
      	-webkit-transform-origin: 0% 0%;
      	transform-origin: 0% 0%;
      }
      .row-item:not(:first-child){padding-top:20rpx;}
      .row-item:not(:last-child){padding-bottom:20rpx;}
    }
  }
  .order-list{
    .list-item{
      width:100%;padding:20rpx;position:relative;display:flex;box-sizing: border-box;
      .pic{
        margin-right:20rpx;
        image{width:140rpx;height:140rpx;border-radius:10rpx;}
      }
      .al{font-size:50rpx;font-weight:bold;}
      .btn{
        border-width:2rpx;border-style:solid;padding:5rpx 10rpx;border-radius:10rpx;
      }
    }
  }
  .order-list .list-item:not(:last-child):after{
    content:"";display:block;
    background-color:#eaeaea;height:1px;overflow:hidden;
    position: absolute;left: 0;right: 0;bottom:0px;
    -webkit-transform: scaleY(0.5) translateY(0.5px);
    transform: scaleY(0.5) translateY(0.5px);
    -webkit-transform-origin: 0% 0%;
    transform-origin: 0% 0%;
  }
  .money-list{
    .m-item:not(:last-child):after {
      content:"";display:block !important;
    	background-color:#eaeaea;height:1px;overflow:hidden;
    	position: absolute;left: 0;right: 0;bottom:0px;
    	-webkit-transform: scaleY(0.5) translateY(0.5px);
    	transform: scaleY(0.5) translateY(0.5px);
    	-webkit-transform-origin: 0% 0%;
    	transform-origin: 0% 0%;
    }
    .m-item{
      position:relative;
      .inner{
        width:100%;display:flex;justify-content:flex-start;align-items:center;
        padding:20rpx;box-sizing: border-box;
      }
      .txt1{padding:0 10rpx;}
      .txt2{padding:0 10rpx;}
      .ico{
        width:40rpx;height:40rpx;border-radius:50%;border:#ccc 2rpx solid;position:relative;
      }
    }
    .m-item.active .dot{
      width:20rpx;height:20rpx;border-radius:50%;
      position:absolute;left:50%;top:50%;margin-top:-11rpx;margin-left:-11rpx;
    }
  }
  .address-area{
    height:100rpx;
    .address-ico{
      width:50rpx;height:50rpx;border-radius:50%;
      text-align:center;line-height:50rpx;
      .al{font-size:36rpx;}
    }
  }
  .r-cell{
    float:right;display:flex;justify-content: flex-end;align-items: center;
    .ico{width:50rpx;height:50rpx;border-radius:50%;text-align:center;line-height:45rpx;box-sizing:border-box;font-size:32rpx;}
    .border-ico{border-style:solid;border-width:2rpx;}
    .txt{width:60rpx;height:50rpx;display:flex;justify-content:center;align-items:center;}
  }
}
.page-box-bottom{
  position: fixed;left: 0;right: 0;bottom: 0;height:100rpx;z-index:10;
  background-color: #fff;box-shadow: 0px 4rpx 18rpx rgba(0, 0, 0, 0.2);
  .box-btn{
    margin-left:20rpx;margin-right:20rpx;
    width:200rpx;height:70rpx;border-radius:60rpx;font-size:36rpx;
    display:flex;justify-content: center;align-items: center;
  }
}
.page-box-bottom.iphone{bottom:68rpx;}
.mdpop-list{
  .scroll_item{display:block;padding:20rpx;box-sizing: border-box;}
  .scroll_item:not(:last-child){border-bottom:#eee 2rpx solid;}
}
.remark-area{
  padding:20rpx;box-sizing: border-box;
  textarea{width:100%;height:200rpx;resize:none;padding:20rpx;box-sizing:border-box;border:#ccc 2rpx solid;border-radius:10rpx;}
  .r-list{
    width:100%;display:flex;flex-wrap:wrap;
    .item:not(:last-child){margin-right:10rpx;}
    .item{
      border:#ccc 2rpx solid;padding:10rpx 20rpx;border-radius:10rpx;
    }
  }
}
.member-auth-modal{
  .input-list{
    padding:0 20rpx;box-sizing: border-box;
    .item{
      height:100rpx;display:flex;align-items:center;justify-content:flex-start;
      .title-cell{width:100rpx;height:100%;display: flex;align-items: left;justify-content:flex-start;align-items: center;text-align:left;}
      .input-cell{
        flex:1;height:100%;display:flex;justify-content: flex-start; align-items: center;position:relative;
        .input{
          width:100%;padding:0 10rpx;box-sizing: border-box;
          color: #333333;justify-content:flex-start;align-items: center;
        }
        .input-placeholder{color:rgba(153,153,153,0.65)}
      }
    }
  }
  .btn-code.disabled{color: #999;}
  .btn-list{
    .btn{
      width:80%;height:70rpx;border-radius:60rpx;font-size:32rpx;
      display:flex;align-items:center;justify-content:center;
    }
  }
}
.order-tip-modal{
  .btn-list{
    .btn{
      width:80%;height:70rpx;border-radius:60rpx;font-size:32rpx;
      display:flex;align-items:center;justify-content:center;
    }
  }
}
</style>
<template>
  <view class="qypay-page bg-page">
    <block wx:if="{{orderData && orderData.id}}">
      <view class="box-area mb10" wx:if="{{orderData && orderData.ordertype == 1}}" @tap="showAddress">
        <view class="box-inner">
          <view class="padding10 address-area flex_left">
            <view class="pr10">
              <view class="address-ico bg-theme" style="{{themeObject.bgStyle}}">
                <text class="al al-dizhi2 color-white"></text>
              </view>
            </view>
            <view class="flex_cell flex_cell">
              <block wx:if="{{selectAddress}}">
                <view><text class="bold">{{ selectAddress.linkman }}</text><text class="ml5">{{ selectAddress.telephone}}</text></view>
                <view class="color-gray">{{ selectAddress.fulladdress }}</view>
              </block>
              <view wx:else class="color-red">请选择地址</view>
            </view>
            <view class="flex_right pl10">
              <icon class="al al-mjiantou-copy2 font18 color-gray"></icon>
            </view>
          </view>
        </view>
      </view>
      <view class="box-area" wx:if="{{selectedMd && orderData}}">
        <view class="box-inner">
          <view class="padding10">
            <view class="font16 bold">{{selectedMd.title}}</view>
            <!-- <view class="color-gray" wx:if="{{orderData.tableid}}">桌号【{{orderData.tableid}}】</view> -->
          </view>
        </view>
      </view>
      <view wx:if="{{orderData && !orderData.ismember && query.xiadan != 1}}" class="box-area mt10" bindtap="toMemberAuth">
        <view class="box-inner flex_center padding10" style="{{themeObject.colorStyle}}box-sizing:border-box;">我是本店会员。去认证 >></view>
      </view>
      <view class="box-area mt10" wx:if="{{disList}}">
        <view class="box-inner">
          <view class="order-list">
            <repeat for="{{listData}}" item="item" index="cindex">
              <view class="list-item">
                <view class="pic flex_left">
                  <image mode="aspectFill" src="{{item.photo}}"/>
                </view>
                <view class="flex_cell">
                  <view class="w_100">
                    <view class="flex_left">
                      <view class="flex_cell">
                        <view class="w_100 name color-black font15 clamp1">{{item.name}}</view>
                      </view>
                      <view class="flex_right bold font16 ml5">¥{{item.listprice}}</view>
                    </view>
                    <view class="flex_left pt10 pb10">
                      <view class="flex_cell">
                        <view class="mt5 color-gray font12 clamp1" wx:if="{{item.options && item.options.id}}">{{item.options.title}}</view>
                      </view>
                      <!--
                      <view class="flex_right color-gray ml5">×{{item.quantity}}</view>
                    -->
                      <view class="r-cell">
                        <view wx:if="{{item.quantity}}" class="ico border-ico" style="{{themeObject.borderStyle}}{{themeObject.colorStyle}}" catchtap="updateEvent({{item}},{{cindex}},'cut')">-</view>
                        <view class="txt">{{item.quantity}}</view>
                        <view class="ico color-white" style="{{themeObject.bgStyle}}" catchtap="updateEvent({{item}},{{cindex}},'add')">+</view>
                      </view>
                    </view>
                    <view class="flex_left mt5">
                      <view class="flex_left flex_cell">
                        <text wx:if="{{item.content}}" class="font12 color-gray">{{item.content}}</text>
                      </view>
                      <view class="flex_right ml5">
                        <view class="btn" style="{{themeObject.borderStyle}}{{themeObject.colorStyle}}" @tap="remarkOrder({{item}},{{cindex}})">特殊备注</view>
                      </view>
                    </view>
                  </view>
                </view>
              </view>
            </repeat>
          </view>
        </view>
      </view>
      <view class="box-area mt10" wx:if="{{disList && orderData.ordertype == 3}}">
        <view class="box-inner">
          <view class="flex_left padding10">
            <view class="color-gray mr10 flex_left">桌号</view>
            <view class="flex_cell flex_left">
              <!-- <text wx:if="{{orderData.tableid}}">{{orderData.tableid}}</text> -->
              <input class="w_100" value="{{orderData.tableid ? orderData.tableid : ''}}" bindinput="keyupZhuohao" placeholder="桌号" maxlength="30"/>
            </view>
          </view>
        </view>
      </view>
      <view class="box-area mt10">
        <view class="box-inner">
          <view class="flex_left padding10">
            <view class="color-gray mr10 flex_left">用餐人数</view>
            <view class="flex_cell flex_left">
              <input type="number" class="w_100" bindinput="keyupText" placeholder="用餐人数" maxlength="3"/>
            </view>
          </view>
        </view>
      </view>
      <view class="box-area mt10" wx:if="{{commCardList.length}}">
        <view class="box-inner">
          <view class="flex_left padding10" @tap="popupCommCardList">
            <view class="color-gray mr10 flex_left color-gray">优惠券</view>
            <view class="flex_cell flex_right" style="{{themeObject.colorStyle}}">
              <text wx:if="{{clickCommCard}}">满{{clickCommCard.ordermoney}}减{{clickCommCard.money}}</text>
              <text wx:else>请选择</text>
              <text class="al al-mjiantou-copy2 font20 bold"></text>
            </view>
          </view>
        </view>
      </view>
      <view class="blank-area"></view>
    </block>
  </view>
  <block wx:if="{{orderData && orderData.id}}">
    <view wx:if="{{isClose}}" class="page-box-bottom flex_center" :class="{'iphone' : isIpx}" style="background-color:#434345;color:#fff;">很抱歉，本店已打烊</view>
    <view wx:else class="page-box-bottom flex_right" :class="{'iphone' : isIpx}">
      <view>
        <text class="font16">合计</text>
        <text class="font20 bold color-theme" style="{{themeObject.colorStyle}}">￥{{payPrice}}</text>
      </view>
      <view class="box-btn" style="{{themeObject.bgStyle}}" @tap="submitOrder">确认下单</view>
    </view>
  </block>
  <popup1 :show.sync="showCommCard" @close.user="closeCommPop" height="60%">
    <popup-header1
      leftText="关闭"
      @on-click-left.user="closeCommPop"
      rightText="确定"
      @on-click-right.user="closeCommPop">
    </popup-header1>
    <scroll-view scroll-y="true">
      <view class="cardlist">
        <repeat for="{{commCardList}}" item="item" index="index">
          <block wx:if="{{orderTruePrice >= item.ordermoney && orderTruePrice - totalQuantity * 0.01 > item.money}}">
            <view @tap.stop="commCardClick({{item}},{{index}})" class="scroll_item radio_check" style="{{themeObject.bgStyle}}">
              <view class="flex_cell txt-cell" style="overflow:visible">
                <view class="font20 mb5 clamp1 txt">满{{item.ordermoney}}减{{item.money}}</view>
                <view class="font12">到期时间 {{item.deadline_str}}</view>
                <view class="ball ball-up"></view>
                <view class="ball ball-down"></view>
              </view>
              <view class="btn-cell flex_center">
                <view class="vux-check-icon font14 pl10 color-gray">
                  <view class="circle-icon">
                    <icon type="success_no_circle" size="16" color="#eb6b5e" wx:if="{{clickCommCard && clickCommCard.id == item.id}}"></icon>
                  </view>
                </view>
              </view>
            </view>
          </block>
          <block wx:else>
            <view class="scroll_item radio_check disabled-state {{orderTruePrice >= item.ordermoney}} {{orderTruePrice - totalQuantity * 0.01 > item.money}}" style="{{themeObject.bgStyle}}">
              <view class="flex_cell txt-cell" style="overflow:visible">
                <view class="font20 mb5 clamp1 txt">满{{item.ordermoney}}减{{item.money}}</view>
                <view class="font14 mb5 clamp1 txt">订单金额不满足使用条件</view>
                <view class="font12">到期时间 {{item.deadline_str}}</view>
                <view class="ball ball-up"></view>
                <view class="ball ball-down"></view>
              </view>
              <view class="btn-cell flex_center"></view>
            </view>
          </block>
        </repeat>
      </view>
    </scroll-view>
  </popup1>
  <popup2 :show.sync="showMdPop" @close.user="closeMdPop" height="60%">
    <popup-header2
      leftText="关闭"
      @on-click-left.user="closeMdPop"
      rightText="确定"
      @on-click-right.user="confirmMd">
    </popup-header2>
    <scroll-view scroll-y="true">
      <view class="mdpop-list">
        <repeat for="{{mdList}}" item="item" index="index">
          <label class="radio scroll_item flex_left" @tap.stop="clickMd({{item}},{{index}})">
            <view class="flex_left radio-cell">
              <radio class="dotradio" value="{{item.id}}" checked="{{clickedMd && clickedMd.id == item.id}}"/>
            </view>
            <view class="flex_cell flex_left">
              <view class="w_100">
                <view class="clamp1 font18 bold">{{item.title}}</view>
                <view>{{item.address}}</view>
              </view>
            </view>
            <view class="flex_right ml10">
              <view>
                <view class="font12 color-gray align_center">距您</view>
                <view class="font12 color-gray align_center">{{item.distance}}</view>
              </view>
            </view>
          </label>
        </repeat>
      </view>
    </scroll-view>
  </popup2>
  <popup3 :show.sync="showRemarkPop" @close.user="closeRemarkPop" height="60%">
    <popup-header3
      leftText="关闭"
      @on-click-left.user="closeRemarkPop"
      rightText="确定"
      @on-click-right.user="submitRemark">
    </popup-header3>
    <scroll-view scroll-y="true">
      <view class="remark-area">
        <view>
          <textarea value="{{remarkCon}}" bindinput="inputEvent"></textarea>
        </view>
        <view class="pt10 pb10 font16">快捷备注</view>
        <view class="r-list">
          <repeat for="{{txtArr}}" item="item" index="index">
            <view class="item" @tap="clickTxt({{item}},{{index}})">{{item}}</view>
          </repeat>
        </view>
      </view>
    </scroll-view>
  </popup3>
  <view wx:if="{{showMemberAuth}}" class="auto-modal flex_center member-auth-modal">
    <view class="modal-inner border-box" style="width:80%;">
      <view class="box-area">
        <view class="box-inner">
          <view class="title b_bottom_after flex_center bold font18">会员认证</view>
          <view class="input-list">
            <view class="item flex_left">
              <view class="title-cell">手机</view>
              <view class="input-cell">
                <input class="input" type="number" placeholder="手机" data-name="mobile" bindinput="keyupFormInput" />
              </view>
            </view>
            <view class="item flex_left">
              <view class="title-cell">验证码</view>
              <view class="input-cell">
                <input class="input" type="number" placeholder="验证码" data-name="xcode" bindinput="keyupFormInput" />
              </view>
              <view class="btn-cell">
                <view class="btn-code" :class="{'disabled' : count !== countNum}" disabled="{{count !== countNum}}" @tap.stop="getXcode" style="{{count == countNum ? themeObject.colorStyle : ''}}">{{codeTxt}}</view>
              </view>
            </view>
          </view>
          <view class="flex_center pt20 pb20 b_top_after btn-list">
            <view class="flex_cell flex_center">
              <view class="btn bg-gray color-white" bindtap="cancelEvent">继续下单</view>
            </view>
            <view class="flex_cell flex_center">
              <view class="btn" style="{{themeObject.bgStyle}}" bindtap="submitEvent">验证</view>
            </view>
          </view>
        </view>
      </view>
    </view>
  </view>
  <view wx:if="{{showTip}}" class="auto-modal flex_center order-tip-modal">
    <view class="modal-inner border-box" style="width:80%;">
      <view class="box-area">
        <view class="box-inner">
          <view class="title flex_center bold font18 b_bottom_after">订单中有重复菜品</view>
          <view class="flex_center pt20 pb20 pl10 pr10 font16" style="{{themeObject.colorStyle}}">{{tipContent}}</view>
          <view class="flex_center pb20 btn-list">
            <view class="flex_cell flex_center">
              <view class="btn" style="{{themeObject.bgStyle}}" bindtap="closeTip">知道了</view>
            </view>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import Util from '@/libs/util'
import Time from '@/libs/time'
import wepy from 'wepy'
import Popup from '@/components/popup'
import PopupHeader from '@/components/popup-header'
import Config from '@/config'
import Reg from '@/libs/reg'
const TimeCount = 60

export default class AddOrder extends wepy.page {
  config = {
    navigationBarTitleText: '结算'
  }

  components = {
    'popup1': Popup,
    'popup-header1': PopupHeader,
    'popup2': Popup,
    'popup-header2': PopupHeader,
    'popup3': Popup,
    'popup-header3': PopupHeader
  }

  data = {
    userInfo: {},
    retailerInfo: {},
    query: {},
    postage: null,
    postPostage: 0,
    payPrice: '0.00',
    orderTruePrice: 0,
    min: 1,
    max: 1,
    maxQuantity: 1,
    selectAddress: null,
    product: {},
    showpopup: false,
    addressId: '',
    quantity: 1,
    shopid: 0,
    content: '',
    submiting: false,
    cardList: [],
    animationCards: {},
    cheap: 0,
    cardtip: '请选择',
    cardChecked: [],
    cardDisabled: [],
    cardPanelMoveUp: false,
    cardid: null,
    retailer: null,
    hiddenComment: false,
    isIpx: false,
    systemInfo: null,
    curOrder: {},
    cardPrice: '0.00',
    buyType: 'online',
    AllowZiti: false,
    payData: {},
    payIng: false,
    allowSend: true,
    disPostageArea: false,
    isFirst: true,
    sellerUser: null,
    cardInfo: null,
    afterCard: false,
    clickBuytype: '',
    showRemark: false,
    MiniInfo: {},
    themeObject: {},
    listData: [],
    disList: false,
    clickProduct: null,
    clickIndex: 0,
    shengPrice: '0.00',
    commCardList: [],
    clickCommCard: null,
    showCommCard: false,
    totalQuantity: 0,
    useCredit: 0,
    deductMoney: 0,
    saveMoneyMode: false,
    distance: 0,
    sysParams: {},
    showMdPop: false,
    mdList: [],
    selectedMd: null,
    userLocation: {},
    orderData: null,
    isClose: false,
    isVip: false,
    showRemarkPop: false,
    remarkCon: '',
    txtArr: ['少油', '微辣', '免辣', '不加香菜', '不加葱'],
    mobile: '',
    xcode: '',
    codeTxt: '获取验证码',
    count: 60,
    countNum: 60,
    intervalId: null,
    showMemberAuth: false,
    giveData: null,
    isGiveData: false,
    showTip: false,
    tipContent: ''
  }
  payEvent () {
    if (this.isIng) return false
    this.isIng = true
    const params = this.payParams
    wepy.requestPayment({
      timeStamp: params.timeStamp,
      nonceStr: params.nonceStr,
      package: params.package,
      signType: 'MD5',
      paySign: params.paySign
    }).then(res => {
      this.isIng = false
      wepy.showToast({
        title: '支付成功',
        icon: 'success',
        duration: 2000
      })
      setTimeout(() => {
        wepy.redirectTo({url: '/packageD/pages/userOrders'})
      }, 2000)
    }, res => {
      wepy.showToast({
        title: '支付失败',
        icon: 'none'
      })
    })
  }
  ajaxOrder (postData) {
    let ajaxData = {id: this.options.orderid, dinners: this.dinners}
    if (this.orderData.ordertype === 3) ajaxData.tableid = this.tableid
    if (this.orderData.ordertype === 1) ajaxData.addressid = this.selectAddress.id
    if (this.clickCommCard) {
      ajaxData.cardid = this.clickCommCard.id
    }
    let ajaxOptions = []
    for (let i = 0; i < this.listData.length; i++) {
      let curd = this.listData[i]
      if (curd.content && curd.content !== '') {
        ajaxOptions.push({id: curd.id, content: curd.content})
      }
    }
    ajaxData.options = ajaxOptions
    if (this.giveData && this.isGiveData) ajaxData.giveid = this.giveData.id
    console.log(ajaxData)
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/order/confirmOrder`,
      data: ajaxData,
      method: 'POST'
    }).then(res => {
      const data = res.data
      // this.payParams = data.data
      // this.payEvent()
      const timeout = Util.delay(data.msg)
      wepy.showToast({
        title: data.msg,
        icon: 'none',
        duration: timeout
      })
      setTimeout(() => {
        if (data.code === 0) {
          if (this.orderData.ordertype === 3) {
            wepy.redirectTo({url: `/packageB/pages/paySuccess?orderid=${this.options.orderid}&tableid=${this.tableid}&storeid=${this.orderData.storeid}&ordertype=3`})
          } else {
            wepy.redirectTo({url: `/pages/pay?id=${this.options.orderid}`})
          }
        } else {
          this.submiting = false
        }
      }, timeout)
    })
  }
  getOrderDetail () {
  }
  getShopData () {
    let params = {}
    if (this.query.shop_id) {
      params.shop_id = this.query.shop_id
    }
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/order/shopShow`,
      data: params
    }).then(res => {
      if (!res) return
      const data = res.data
      const retdata = data.data ? data.data : data
      const order = retdata
      if (!order) {
        return false
      }
      this.curOrder = order
      if (this.curOrder.sheng && this.curOrder.sheng !== '' && this.curOrder.sheng !== '0.00') {
        let sheng = parseFloat(this.curOrder.sheng.replace(/,/g, '')) * this.curOrder.quantity
        this.shengPrice = sheng.toFixed(2)
      }
      let curstorage = this.curOrder.storage
      if (this.curOrder.activityinfo && curstorage > this.curOrder.activityinfo.everybuy) {
        curstorage = this.curOrder.activityinfo.everybuy
      }
      this.maxQuantity = curstorage
      this.product = order
      this.quantity = this.product.quantity
      this.handleCredit()
      this.truePrice = (parseFloat(this.product.commonprice.replace(/,/g, '')) * this.quantity).toFixed(2)
      this.shopid = this.product.id
      this.postPostage = parseFloat(order.postage.replace(/,/g, '')).toFixed(2)
      this.postage = parseFloat(order.postage.replace(/,/g, ''))
      let total1 = parseFloat(order.special.replace(/,/g, '')) * order.quantity
      if (order.postage) {
        total1 += parseFloat(order.postage.replace(/,/g, ''))
      }
      this.cardPrice = total1
      this.computePrice()
      this.getCanUseCard()
      if (this.isFirst) {
        this.getAddressList()
        this.isFirst = false
      }
      this.$apply()
    })
  }
  getData () {
    let ajaxParams = {id: this.options.orderid}
    if (this.options.xiadan) ajaxParams.xiadan = this.options.xiadan
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/order/orderDetail`,
      data: ajaxParams,
      method: 'post'
    }).then(res => {
      if (!res) return
      const data = res.data
      if (data.givedata) this.giveData = data.givedata
      let detailData = data.data ? data.data : data
      let retdata = detailData.orderlist
      this.orderData = detailData
      this.tableid = this.orderData.tableid
      if (data.dupinfo && data.dupinfo.length) {
        this.tipContent = data.dupinfo.join(',')
        this.showTip = true
      }
      for (let i = 0; i < this.mdList.length; i++) {
        let curMd = this.mdList[i]
        if (detailData.storeid === curMd.id) {
          this.selectedMd = curMd
        }
      }
      this.isVip = this.userInfo.isvip[this.selectedMd.id]
      this.totalQuantity = 0
      for (let i = 0; i < retdata.length; i++) {
        let curd = retdata[i]
        if (curd.quantity > curd.storage) {
          retdata[i].quantity = curd.storage
        }
        if (curd.quantity <= 1) {
          curd.disabledMin = true
        }
        this.totalQuantity += curd.quantity
        if (curd.productoptions && curd.productoptions.length) {
          for (let j = 0; j < curd.productoptions.length; j++) {
            if (curd.productoptions[j].id === curd.foid) {
              curd.selectedOption = curd.productoptions[j]
              if (curd.productoptions[j].storage === 1) {
                curd.inputDisalbed = true
              }
              if (curd.quantity >= curd.productoptions[j].storage) {
                curd.disabledMax = true
              }
              if (this.isVip) {
                curd.listprice = curd.productoptions[j].memberprice
              } else {
                curd.listprice = curd.productoptions[j].price
              }
              break
            }
          }
        } else {
          if (curd.storage === 1) {
            curd.inputDisalbed = true
          }
          if (curd.quantity >= curd.storage) {
            curd.disabledMax = true
          }
          if (this.isVip) {
            curd.listprice = curd.memberprice
          } else {
            curd.listprice = curd.special
          }
        }
        retdata[i].truePrice = (parseFloat(curd.special.replace(/,/g, '')) * curd.quantity).toFixed(2)
        let total1 = parseFloat(curd.special.replace(/,/g, '')) * curd.quantity
        if (curd.postage && this.orderData.ordertype === 1) {
          retdata[i].postPostage = parseFloat(curd.postage.replace(/,/g, '')).toFixed(2)
          total1 += parseFloat(curd.postage.replace(/,/g, ''))
        }
        retdata[i].cardPrice = total1
      }
      this.listData = retdata
      this.handleCredit()
      this.disList = true
      this.computePrice()
      if (this.isFirst && this.orderData.ordertype === 1) {
        this.getAddressList()
        this.isFirst = false
      }
      this.$apply()
    })
  }
  computePrice () {
    let payPrice = 0
    let postage = 0
    let trueTotal = 0
    this.totalQuantity = 0
    console.log('进入到了计算computePrice')
    for (let i = 0; i < this.listData.length; i++) {
      let curd = this.listData[i]
      console.log(curd)
      let total = 0
      total += parseFloat(curd.listprice.replace(/,/g, '')) * curd.quantity
      this.totalQuantity += curd.quantity
      this.listData[i].cardPrice = total
      this.listData[i].orderPrice = total
      if (this.clickCommCard) {
        if (this.orderData.ordertype === 1 && curd.postPostage) {
          let curpostage = curd.postPostage
          postage += parseFloat(curpostage)
        }
      } else {
        if (curd.selectedCard) {
          let postageStr = '0'
          if (this.orderData.ordertype === 1) postageStr = `${curd.postPostage}`
          let cha = parseFloat(curd.orderPrice) - parseFloat(postageStr.replace(/,/g, '')) - parseFloat(curd.selectedCard.money)
          cha = cha < 0 ? 0 : cha
          payPrice += cha + parseFloat(postageStr.replace(/,/g, ''))
        } else {
          payPrice += total
        }
      }
      trueTotal += parseFloat(curd.listprice.replace(/,/g, '')) * curd.quantity
    }
    if (!this.orderTruePrice) this.orderTruePrice = trueTotal
    console.log('************************当前订单的真实价格')
    console.log(this.orderTruePrice)
    console.log(this.totalQuantity)
    if (this.clickCommCard) {
      this.payPrice = (this.orderTruePrice + postage - parseFloat(this.clickCommCard.money.toString().replace(/,/g, ''))).toFixed(2)
    } else {
      this.payPrice = payPrice.toFixed(2)
    }
    this.$apply()
  }
  changeAddress () {
    if (!this.selectAddress || !this.selectAddress.id) return false
    const selectedProvince = this.selectAddress.province
    let allAllowSend = true
    this.orderTruePrice = 0
    for (let k = 0; k < this.listData.length; k++) {
      let curd = this.listData[k]
      const postageSetting = curd.postageSetting
      let allowSend = true
      let isset = false
      let postPostage = 0
      if (postageSetting && postageSetting.length) {
        for (let i = 0; i < postageSetting.length; i++) {
          const curSet = postageSetting[i]
          const curProvince = curSet.province
          let isTw = false
          let isAm = false
          if ((curProvince.indexOf('臺灣') > -1 || curProvince.indexOf('台湾') > -1) && (selectedProvince.indexOf('臺灣') > -1 || selectedProvince.indexOf('台湾') > -1)) {
            isTw = true
          } else if ((curProvince.indexOf('澳門') > -1 || curProvince.indexOf('澳门') > -1) && (selectedProvince.indexOf('澳門') > -1 || selectedProvince.indexOf('澳门') > -1)) {
            isAm = true
          }
          if (selectedProvince === curProvince || selectedProvince.indexOf(curProvince) > -1 || curProvince.indexOf(selectedProvince) > -1 || isTw || isAm) {
            if (curSet.postage !== -1 && curSet.postage !== '-1' && curSet.postage !== '-1.00') {
              if (curSet.standard === 0) {
                postPostage = curSet.postage.replace(/,/g, '')
              } else {
                let addcount = curSet.addcount
                let curp = curSet.postage.replace(/,/g, '')
                let count = Math.ceil(curd.quantity / addcount)
                postPostage = (count * parseFloat(curp)).toFixed(2)
              }
              allowSend = true
            } else {
              allowSend = false
              allAllowSend = false
            }
            isset = true
            break
          }
        }
      }
      this.orderTruePrice += parseFloat(curd.memberprice.replace(/,/g, '')) * curd.quantity
      if (!isset) {
        if (curd.postage) {
          this.listData[k].postPostage = curd.postage.replace(/,/g, '')
        }
      } else {
        this.listData[k].postPostage = postPostage
      }
      this.listData[k].allowSend = allowSend
      this.listData[k].disPostageArea = true
    }
    this.allowSend = allAllowSend
    this.disPostageArea = true
    this.$apply()
    this.computePrice()
  }
  getAddressList () {
    const address = this.$parent.globalData.address
    if (address && address.id) {
      this.selectAddress = address
      this.changeAddress()
      this.$apply()
    } else {
      wepy.request({
        url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/address/getList`
      }).then(res => {
        if (!res) return
        const data = res.data
        const retdata = data.data ? data.data : data
        if (retdata.length) {
          this.selectAddress = retdata[0]
        }
        this.changeAddress()
        this.$apply()
      })
    }
  }
  handlePageData () {
    this.globalData = this.$parent.globalData
    Util.appInit(this.globalData, this)
    this.userInfo = this.globalData.userInfo
    this.MiniInfo = this.globalData.MiniInfo
    this.sysParams = this.globalData.SystemParams
    // this.isClose = Util.checkClose(this.sysParams.closestore)
    this.mdList = this.globalData.Store
    let orderRemark = this.globalData.SystemParams.OrderRemark
    this.showRemark = orderRemark ? parseInt(orderRemark) : false
    let saveMoneyMode = this.globalData.SystemParams.SaveMoneyMode
    this.saveMoneyMode = saveMoneyMode ? parseInt(saveMoneyMode) : false
    this.getData()
    this.getCommList()
    wepy.getSystemInfo().then(res => {
      if (res.model.substring(0, res.model.indexOf('X')) + 'X' === 'iPhone X') {
        this.isIpx = true
      }
      this.$apply()
    })
  }
  async onLoad (options) {
    this.query = options
    this.options = options
    this.$parent.globalData.address = null
    if (this.$parent.globalData.flag.bokaAuth) {
      this.handlePageData()
    } else {
      this.$parent.loadCallback = () => {
        this.handlePageData()
      }
    }
  }
  onHide () {
    this.inHide = true
  }
  onUnload () {
    this.inHide = true
    this.selectedCard = null
    this.cardInfo = null
    this.$apply()
  }
  handleShowData () {
    this.clickCommCard = null
    this.contentVal = ''
    if (this.inHide && this.orderData && this.orderData.ordertype === 1) {
      this.getAddressList()
    }
    if (this.inHide) {
      this.inHide = false
      // this.isClose = Util.checkClose(this.sysParams.closestore)
    }
    this.$apply()
  }
  onShow () {
    if (this.$parent.globalData.flag.bokaAuth) {
      this.handleShowData()
    } else {
      this.$parent.showCallback = () => {
        this.handleShowData()
      }
    }
  }
  getCommList () {
    wepy.request({
      url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/card/canUseCard`,
      data: {type: 'common', wid: this.globalData.Wid},
      method: 'post'
    }).then(res => {
      const data = res.data
      let retdata = data.data ? data.data : data
      for (let i = 0; i < retdata.length; i++) {
        retdata[i].deadline_str = new Time(retdata[i].deadline * 1000).dateFormat('yyyy-MM-dd hh:mm')
      }
      this.commCardList = retdata
      this.$apply()
    })
  }
  handleCredit () {
    let ocredit = 0
    for (let i = 0; i < this.listData.length; i++) {
      let item = this.listData[i]
      ocredit += item.maxcredits * item.quantity
    }
    if (this.userInfo.credit < ocredit) {
      ocredit = this.userInfo.credit
    }
    this.useCredit = ocredit
    this.deductMoney = (ocredit / 100).toFixed(2)
  }
  confirmEvent () {
    if (this.orderData.ordertype === 3) {
      if (!this.tableid || this.tableid === '') {
        wepy.showToast({
          title: '请输入桌号',
          icon: 'none'
        })
        return false
      }
    } else if (this.orderData.ordertype === 1) {
      if (!this.selectAddress) {
        wepy.showToast({
          title: '请选择地址',
          icon: 'none'
        })
        return false
      }
    }
    if (!this.dinners || this.dinners === '') {
      wepy.showToast({
        title: '请输入用餐人数',
        icon: 'none'
      })
      return false
    }
    if (isNaN(this.dinners) || !/^[1-9]\d*$/.test(this.dinners)) {
      wepy.showToast({
        title: '请输入正确的用餐人数',
        icon: 'none'
      })
      return false
    }
    this.submiting = true
    this.isShowLoading = true
    this.ajaxOrder()
  }
  methods = {
    closeTip () {
      this.showTip = false
      this.$apply()
    },
    toMemberAuth () {
      this.showMemberAuth = true
      this.$apply()
      // wepy.navigateTo({url: `/package/pages/memberAuth?storeid=${this.orderData.storeid}&orderid=${this.orderData.id}`})
    },
    keyupZhuohao (e) {
      this.tableid = e.detail.value
    },
    keyupText (e) {
      this.dinners = e.detail.value
    },
    keyupContent (e) {
      const dataset = e.currentTarget.dataset
      let index = dataset.index
      this.listData[index].contentVal = e.detail.value
    },
    closeCommPop () {
      this.showCommCard = false
    },
    popupCommCardList () {
      this.showCommCard = true
    },
    commCardClick (item, index) {
      if (!this.clickCommCard || this.clickCommCard.id !== item.id) {
        this.clickCommCard = item
      } else {
        this.clickCommCard = null
      }
      this.computePrice()
      this.$apply()
    },
    submitOrder () {
      if (this.submiting) return false
      if (this.giveData && !this.afterConfirm) {
        wepy.showModal({
          title: '提示',
          content: '您有免费菜品赠送，需不需要加入菜单？',
          cancelText: '不需要',
          confirmText: '需要',
          confirmColor: this.themeObject.themeColor
        }).then(res => {
          if (res.confirm) {
            this.afterConfirm = true
            this.isGiveData = true
            this.confirmEvent()
          } else {
            this.afterConfirm = true
            this.isGiveData = false
            this.confirmEvent()
          }
        })
      } else {
        this.confirmEvent()
      }
    },
    closeMdPop () {
      this.showMdPop = false
      this.$apply()
    },
    chooseMd () {
      this.clickedMd = this.selectedMd
      this.showMdPop = true
      this.$apply()
    },
    clickMd (item, index) {
      this.clickedMd = item
      this.$apply()
    },
    confirmMd () {
      if (this.clickedMd && this.clickedMd.id) {
        this.selectedMd = this.clickedMd
        this.distance = Util.getDistance(this.userLocation.latitude, this.userLocation.longitude, this.selectedMd.latitude, this.selectedMd.longitude)
      }
      this.showMdPop = false
      this.$apply()
    },
    closeRemarkPop () {
      this.showRemarkPop = false
      this.$apply()
    },
    remarkOrder (item, index) {
      this.selectedProduct = item
      this.selectedIndex = parseInt(index)
      if (item.content) {
        this.remarkCon = item.content
      } else {
        this.remarkCon = ''
      }
      this.showRemarkPop = true
      this.$apply()
    },
    clickTxt (item, index) {
      if (this.remarkCon !== '') {
        this.remarkCon = `${this.remarkCon},${item}`
      } else {
        this.remarkCon = item
      }
      this.$apply()
    },
    inputEvent (e) {
      this.remarkCon = e.detail.value
    },
    submitRemark () {
      this.listData[this.selectedIndex].content = this.remarkCon
      this.showRemarkPop = false
      this.$apply()
    },
    showAddress (e) {
      wepy.navigateTo({url: '/packageB/pages/address?mod=inner'})
    },
    updateEvent (item, index, type) {
      if (this.updateIng) return false
      this.updateIng = true
      let newQ = item.quantity
      if (type === 'add') {
        newQ = newQ + 1
      } else {
        newQ = newQ - 1
        if (newQ < 0) newQ = 0
      }
      wepy.request({
        url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/order/updateOrderItem`,
        data: {itemid: item.id, quantity: newQ},
        method: 'post'
      }).then(res => {
        const data = res.data
        this.updateIng = false
        if (data.code === 0) {
          if (newQ > 0) {
            this.listData[index].quantity = newQ
          } else {
            this.listData.splice(index, 1)
          }
          this.computePrice()
        } else {
          wepy.showToast({
            title: data.msg,
            icon: 'none'
          })
        }
        this.$apply()
      })
    },
    keyupFormInput (e) {
      const dataset = e.currentTarget.dataset
      this[dataset.name] = e.detail.value
      this.$apply()
    },
    cancelEvent () {
      this.showMemberAuth = false
      this.$apply()
    },
    submitEvent () {
      if (this.submitIng1) return false
      if (!this.mobile || this.mobile === '') {
        wepy.showToast({
          title: '请输入手机号码',
          icon: 'none'
        })
        return false
      }
      if (!Reg.rPhone.test(this.mobile)) {
        wepy.showToast({
          title: '请输入正确的手机号',
          icon: 'none'
        })
        return false
      }
      if (!this.xcode || this.xcode === '') {
        wepy.showToast({
          title: '请输入验证码',
          icon: 'none'
        })
        return false
      }
      // if (this.xcode !== this.xcode1) {
      //   wepy.showToast({
      //     title: '请输入正确的验证码',
      //     icon: 'none'
      //   })
      //   return false
      // }
      this.submitIng1 = true
      wepy.request({
        url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/user/queryMemberCard`,
        data: {
          mobile: this.mobile,
          storeid: this.orderData.storeid,
          orderid: this.orderData.id,
          securecode: this.xcode
        }
      }).then(res => {
        wepy.hideLoading()
        this.submitIng1 = false
        const data = res.data
        let timeout = Util.delay(data.msg)
        wepy.showToast({
          title: data.msg,
          icon: 'none'
        })
        setTimeout(() => {
          if (data.code === 0) {
            this.orderData.ismember = 1
            this.userInfo.isvip[this.orderData.storeid] = 1
            this.$parent.globalData.userInfo = this.userInfo
            this.showMemberAuth = false
            this.$apply()
          }
        }, timeout)
      })
    },
    getXcode () {
      if (this.getXcodeFlag) return
      clearInterval(this.intervalId)
      if (Reg.rPhone.test(this.mobile)) {
        wepy.showLoading()
        wepy.request({
          url: `${Config.BokaApi}/${Config[Config.ApiVersion]}/user/verifyMobile`,
          data: {mobile: this.mobile}
        }).then(res => {
          wepy.hideLoading()
          const data = res.data
          if (data.code === 0) {
            wepy.showToast({
              title: data.msg,
              icon: 'none'
            })
            this.xcode1 = data.data
            console.log(typeof this.xcode1)
            this.applyMobile = this.mobile
            this.getXcodeFlag = 1
            this.intervalId = setInterval(() => {
              console.log('进入到了倒计时方法')
              this.count--
              if (!this.count) {
                this.count = TimeCount
                this.codeTxt = '获取验证码'
                clearInterval(this.intervalId)
                this.getXcodeFlag = false
              } else {
                this.codeTxt = `${this.count}秒`
              }
              this.$apply()
            }, 1000)
          } else {
            this.getXcodeFlag = 0
            this.applyMobile = null
            wepy.showToast({
              title: data.msg,
              icon: 'none',
              duration: Util.delay(data.msg)
            })
            clearInterval(this.intervalId)
          }
        })
      } else {
        wepy.showToast({
          title: '请输入正确的手机号',
          icon: 'none'
        })
      }
    }
  }
}
</script>
